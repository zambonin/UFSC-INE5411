2.1.1   a)  add  f, g, h                    b)  addi h, h, 5
            add  f, f, i                        add  f, g, h
            add  f, f, j

2.2.1   a)  add  f, f, f                    b)  addi j, j, 2
            add  f, f, i                        add  f, g, j

2.2.4   a)  f = f + h                       b)  f = 0 - f + 1

2.3.1   a)  add  f, f, g                    b)  addi f, f, 5
            add  f, f, h                        sub  f, g, f
            add  f, f, i
            addi j, j, 2
            add  f, f, j

2.3.4   a)  f = -g + h                      b)  f = g - (f + 1)

2.4.1   a)  lw   $s0, 16($s7)               b)  lw   $t0, 16($s7)   # B[4]
            add  $s0, $s0, $s1                  sll  $t0, $t0, 2    # B[4] * 4
            add  $s0, $s0, $s2                  add  $t0, $t0, $s6  # A + B[4]
                                                lw   $t1, 0($t0)    # A[B[4]]
                                                sub  $s0, $s1, $t1

2.4.4   a)  f = f + g + h + i + j           b)  f = A[1]

2.5.4   a)  0x12345678 = 1*16^7 + 2*16^6 + 3*16^5 + 4*16^4 + 5*16^3 + 6*16^2
                        + 7*16^1 + 8*16^0 = 305419896

        b)  0xbeadf00d = 11*16^7 + 14*16^6 + 10*16^5 + 13*16^4 + 15*16^3
                        + 13*16^0 = 3199070221

2.5.5   a)               Big-    Little-     b)              Big-    Little-
             Address    endian   endian          Address    endian   endian
                0         12       78               0         be       0d
                4         34       56               4         ad       f0
                8         56       34               8         f0       ad
               12         78       12              12         0d       be

2.11.5  a)  opcode    rs     rt     rd   shamt   funct
            000000  00001  00010  00011  00000  100000
            Instruction:    add $v1, $at, $v0

        b)  opcode    rs     rt        const
            101011  10000  00101  0000000000000100
            Instruction:    sw  $a1, 4($s0)

2.12.1  a)  log_2 8 = 3
            opcode    rs      rt      rd     shamt   funct
            6 bits  3 bits  3 bits  3 bits  5 bits  6 bits
            6 + 3 + 3 + 3 + 5 + 6 = 26 bits needed.

        b)  There would be no change (R-type instructions don't use constants).

2.12.2  a)  log_2 8 = 3
            opcode    rs      rt     const
            6 bits  3 bits  3 bits  16 bits
            6 + 3 + 3 + 16 = 28 bits needed.

        b)  opcode    rs      rt     const
            6 bits  5 bits  5 bits  10 bits
            6 + 5 + 5 + 10 = 26 bits needed.

2.15.2  a)  nor $t1, $t3, $t3                b)  xor $t1, $t2, $t3
            and $t1, $t1, $t2                    nor $t1, $t1, $t1

2.15.5  a)  lw  t3, 0($t2)                   b)          beq $t0, $zero, ELSE
            and $t0, $t1, $t3                            add $t0, $t1, $zero
                                                         j   END
            A = $t0                              ELSE:
            B = $t1                                      lw  $t0, 0($t2)
            C = $t2                              END:    ...

2.16.4  a)  2                                b)  2

2.17.3  a)          sub $t2, $zero, $t3      or         slt $t0, $zero, $t3
                    slt $t1, $t2, $t3                   bne $t0, $zero, DONE
                    beq $t1, $zero, DONE                sub $t2, $zero, $t3
                    add $t2, $zero, $t3          DONE:  add $t2, $zero, $t3
            DONE:   ...

        b)  slt $t1, $t3, $t2

